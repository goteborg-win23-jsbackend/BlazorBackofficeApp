@page "/subscribers"
@using BlazorBackofficeApp.Data.Entities
@using BlazorBackofficeApp.Models
@using BlazorBackofficeApp.Services
@using System.Text.Json.Serialization
@using Azure.Messaging.ServiceBus;
@using Microsoft.AspNetCore.Authorization
@using Newtonsoft.Json;
@attribute [StreamRendering]

@inject UserService UserService
@inject HttpClient HttpClient
@rendermode InteractiveServer
@inject IConfiguration Configuration
@attribute [Authorize]

@code {
    private string emailToDelete = "";
    public SubscibersModel subscriberToUpdate = new SubscibersModel();
    private bool responseActive = false;
    private bool optionActive = false;
    private bool confirmation = false;
    private bool showForm = false;
    private bool showNewsletter = false;
    private string responseInfo = "";
    private List<SubscibersModel> subscribers = new List<SubscibersModel>();
    private string ServiceBusConnectionString = "";
    private string responseFromProvider = "";
    private string QueueName = "email_request";
    private EmailRequest emailForm = new EmailRequest();


    private bool isLoading = true; 

    protected override async Task OnInitializedAsync()
    {
        try
        {
            subscribers = await UserService.GetAllUsersAsync();
        }
        finally
        {
            isLoading = false; 
        }

        ServiceBusConnectionString = Configuration["ServiceBusConnection"]!;
        if (string.IsNullOrEmpty(ServiceBusConnectionString))
        {
            responseFromProvider = "ServiceBusConnection is not set.";
        }
    }

    private string ToEmailsString
    {
        get => string.Join(", ", emailForm.To ?? Enumerable.Empty<string>());
        set
        {
            emailForm.To = value?.Split(',', StringSplitOptions.RemoveEmptyEntries).Select(x => x.Trim()).ToList();
        }
    }
    private void AddToEmail(string email)
    {
        emailForm.To ??= new List<string>();
        emailForm.To.Add(email);
        ToEmailsString = string.Join(", ", emailForm.To);
    }
    public async Task SendEmail()
    {
        try
        {

            if (emailForm.To == null || !emailForm.To.Any())
            {
                responseFromProvider = "To field is required.";
                return;
            }
            if (string.IsNullOrEmpty(emailForm.Subject))
            {
                responseFromProvider = "Subject is required.";
                return;
            }
            if (string.IsNullOrEmpty(emailForm.HtmlBody) && string.IsNullOrEmpty(emailForm.PlainText))
            {
                responseFromProvider = "Either HTML Body or Plain Text Body is required.";
                return;
            }


            await using (var client = new ServiceBusClient(ServiceBusConnectionString))
            {
                var sender = client.CreateSender(QueueName);


                string messageBody = JsonConvert.SerializeObject(emailForm);


                var message = new ServiceBusMessage(messageBody);


                await sender.SendMessageAsync(message);


                emailForm = new EmailRequest();
                responseInfo = "Email sent successfully.";
                responseActive = true;

            }
        }
        catch (Exception ex)
        {
    
            responseFromProvider = $"An error occurred: {ex.Message}";
        }
    }
    public void AddAllSubs()
    {
        emailForm.To ??= new List<string>();

        foreach (var subscriber in subscribers)
        {
            emailForm.To.Add(subscriber.Email);
        }

        ToEmailsString = string.Join(", ", emailForm.To);
    }
    public void AddBody()
    {
        // Lägg till det önskade HTML-snippetet till htmlBody
        emailForm.PlainText = "Nyhetsbrev";
        emailForm.Subject = "Welcome subscriber";
        emailForm.HtmlBody = @"
        <!DOCTYPE html>
        <html lang='sv-se'>
        <head>
            <meta chartset='UTF-8'>
            <meta name='viewport' content='width=device-width, initial-scale=1.0'>
            <title>Nyhetsbrev</title>
        </head>
        <body>
            <div style='color: #191919; max-width: 500px'>
                <div style='background-color: #4F85F6; color: white; text-align: center; padding: 20px 0;'>
                    <h1 style='font-weight: 400;'>Nyhetsbrev</h1>
                </div>
                <div style='background-color: #f4f4f4; padding: 1rem 2rem;'>
                    <p>Dear Subscirber</p>

                </div>
                <div style='background-color: #f4f4f4; padding: 1rem 2rem;'>
                    <p>Lorem100</p>

                </div>
                <div style='color: #191919; text-align: center; font-size: 11px'>
                    <p>Silicon, Sveavägen 1, SE-123 45 Stockholm, Sweden</p>
                </div>
            </div>
        </body>
        </html>
    ";
    }
    public async Task DeletedSubsciber(string mail)
    {
        var result = await UserService.DeleteSubscriber(mail);
        if (result)
        {
            responseInfo = "Subscriber was deleted";
            responseActive = true;
            confirmation = false;
        }
        else
        {
            responseInfo = "Something went wrong";
            responseActive = true;
            confirmation = false;
        }

    }
    public void ShowOption(string mail)
    {

        confirmation = true;
        emailToDelete = mail;
    }
    public void OptionDown()
    {
        confirmation = false;
    }
    public void ShowUpdateOption(SubscibersModel model)
    {
        showNewsletter = true;
        subscriberToUpdate = model;
    }
    public void CloseSubOptions()
    {
        showNewsletter = false;
    }
    public async Task UpdateSubscriber(SubscibersModel model)
    {

        var subscriberObject = new SubscibersModel
            {
                Email = model.Email,
                DailyNewsletter = model.DailyNewsletter,
                AdvertisingUpdates = model.AdvertisingUpdates,
                WeekinReview = model.WeekinReview,
                EventUpdates = model.EventUpdates,
                StartupsWeekly = model.StartupsWeekly,
                Podcasts = model.Podcasts
            };
        var response = await HttpClient.PutAsJsonAsync("https://newsletterprovider-silicon-cl.azurewebsites.net/api/UpdateSubscriber?code=lWH2V6mHjVOveXSlNWdD4wEjh0r86cPB8q9clXo3ylcmAzFu4B_ABw%3D%3D", subscriberObject);
        @if (response.IsSuccessStatusCode)
        {
            showNewsletter = false;
            responseActive = true;
            responseInfo = "Subscribers was updated successfully";
        }
        else
        {
            responseActive = true;
            responseInfo = "Something went wrong";
        }
    }
}

<h3>Subscribers</h3>

@if (isLoading)
{
    <div class="spinner-border" role="status">
        <span class="sr-only"></span>
    </div>
}

else
{
    <ul class="subscriber-list">
        @foreach (var subscriber in subscribers)
        {
            <li class="subscriber-item">
                <img src="/Images/avatar.svg" alt="Alternate Text" />
                <h5 class="subscriber-email">@subscriber.Email</h5>
                <div class="button-group">
                    
                    <button @onclick="@(() => AddToEmail(subscriber.Email))" class="btn btn-add-to">Add Subscriber to Form</button>
                    <button @onclick="@(() => ShowOption(subscriber.Email))" class="btn btn-delete">Delete Subscriber</button>
                    <button @onclick="@(() => ShowUpdateOption(subscriber))" class="btn btn-update">Update Subscriber</button>
                   
                </div>
            </li>
        }
    </ul>
    @if (confirmation)
    {
        <div class="confirmation">
            <div>
                <p>Are you sure?</p>
                <button @onclick="@(() => DeletedSubsciber(emailToDelete))" class="btn btn-add-to">Yes</button>
                <button @onclick="OptionDown" class="btn btn-add-to">No</button>
            </div>

        </div>
    }
    @if (showNewsletter)
    {
        <section id="newsletter" class="newsletter">
            <div class="swish">
                <div class="title">
                    
                    
                </div>
                <EditForm Model="subscriberToUpdate" OnValidSubmit="() => UpdateSubscriber(subscriberToUpdate)">
                    <DataAnnotationsValidator />
                    <div class="signup">
                        <h5>Sign up for Newsletters</h5>
                        <div class="checkbox">
                            <div class="box">
                                <InputCheckbox @bind-Value="subscriberToUpdate.DailyNewsletter" />
                                <label>Daily Newsletter</label>
                            </div>
                            <div class="box">
                                <InputCheckbox @bind-Value="subscriberToUpdate.EventUpdates" />
                                <label>Event Updates</label>
                            </div>
                            <div class="box">
                                <InputCheckbox @bind-Value="subscriberToUpdate.AdvertisingUpdates" />
                                <label>Advertising Updates</label>
                            </div>
                            <div class="box">
                                <InputCheckbox @bind-Value="subscriberToUpdate.StartupsWeekly" />
                                <label>Startups Weekly</label>
                            </div>
                            <div class="box">
                                <InputCheckbox @bind-Value="subscriberToUpdate.WeekinReview" />
                                <label>Week in Review</label>
                            </div>
                            <div class="box">
                                <InputCheckbox @bind-Value="subscriberToUpdate.Podcasts" />
                                <label>Podcasts</label>
                            </div>
                        </div>
                    </div>
                    <div class="input-field">
                        <i class="fa-regular fa-envelope"></i>
                        <InputText type="email" @bind-Value="subscriberToUpdate.Email" class="field" placeholder="Enter your email" />
                        <button class="btn-theme" type="submit">Update Subscriber</button>
                        <button @onclick="CloseSubOptions" class="btn-theme">Cancel</button>
                    </div>
                    <ValidationMessage For="@(() => subscriberToUpdate.Email)" />
                    @if (responseActive)
                    {
                        <p>@responseInfo</p>
                    }
                    
                </EditForm>
            </div>
        </section>
    }
   
    <div class="form-group">
        <button class="btn-mine" @onclick="AddBody">Add custom mail</button>
        <button @onclick="AddAllSubs" class="btn-mine">Add All Subscribers</button>
    </div>
   
    
    @if (responseActive)
    {
        <div class="info-user">@responseInfo</div>
    }
}

<h3>Send Email</h3>


<EditForm FormName="EmailForm" Model="emailForm" OnValidSubmit="SendEmail" method="post" class="email-form">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="to-email">To Email:</label>
        <InputTextArea id="to-email" @bind-Value="ToEmailsString" class="form-control" />
    </div>
    <div class="form-group">
        <label for="subject">Subject:</label>
        <InputText id="subject" @bind-Value="emailForm.Subject" class="form-control" />
    </div>
    <div class="form-group">
        <label for="html-body">HTML Body:</label>
        <InputTextArea id="html-body" @bind-Value="emailForm.HtmlBody" class="form-control" rows="10" cols="50" />
    </div>
    <div class="form-group">
        <label for="plain-text-body">Plain Text Body:</label>
        <InputTextArea id="plain-text-body" @bind-Value="emailForm.PlainText" class="form-control" />
    </div>

    <button class="btn-mine" type="submit">Send Email</button>

    <p>@responseFromProvider</p>
</EditForm>
 



