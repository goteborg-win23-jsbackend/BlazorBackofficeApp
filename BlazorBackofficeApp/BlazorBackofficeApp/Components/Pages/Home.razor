@page "/"
@using BlazorBackofficeApp.Contexts
@using BlazorBackofficeApp.Data
@using BlazorBackofficeApp.Models
@using BlazorBackofficeApp.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@inject ApplicationDbContext DbContext
@inject UserService UserService
@inject RoleManager<IdentityRole> RoleManager
@inject UserManager<ApplicationUser> UserMananger


@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>Users</PageTitle>
@code {

    BasicInfoForm basicInfoForm = new BasicInfoForm();

    ApplicationUser infoFromSelectedUser = new ApplicationUser();
    bool statusMessage = false;
    string updateSelectedId = "";
    List<UserWithRoles> userListWithRoles;
    string resultDelete = "";
    string resultUpdate = "";
    List<ApplicationUser> userList;
    bool ShowUserForm = false;

    protected override async Task OnInitializedAsync()
    {

        userList = await DbContext.Users.ToListAsync();
        await LoadUsers();
        await LoadUsersWithRoles();

    }
    private async Task LoadUsersWithRoles()
    {
        userListWithRoles = await UserService.GetAllUsersWithRolesAsync();
    }

    private async Task DeleteUser(string userId)
    {
        var result = await UserService.DeleteUser(userId);
        if (result)
        {
            resultDelete = "Success";
            userList = await DbContext.Users.ToListAsync();
            showDeleteConfirmation = false;
        }
        else
        {
            resultDelete = "Error";
        }
    }
    private async Task LoadUsers()
    {
        userList = await DbContext.Users.ToListAsync();

    }

    private async Task UpdateUserRole(string userId)
    {
        var result = await UserService.UpdateRole(userId);
        if (result)
        {
            resultUpdate = "Success";
            userList = await DbContext.Users.ToListAsync();
            showUpdateConfirmation = false;
        }
        else
        {
            resultUpdate = "Error";
        }
    }

    bool showDeleteConfirmation = false;
    bool showUpdateConfirmation = false;
    string selectedUserId = "";

    private void ShowDeleteConfirmation(string userId)
    {
        selectedUserId = userId;
        showDeleteConfirmation = true;
    }

    private void ShowUpdateConfirmation(string userId)
    {
        selectedUserId = userId;
        showUpdateConfirmation = true;
    }

    private void CloseDeleteConfirmation()
    {
        showDeleteConfirmation = false;
    }

    private void CloseUpdateConfirmation()
    {
        showUpdateConfirmation = false;
    }
    private void ShowUpdateForm(ApplicationUser user)
    {

        ShowUserForm = true;
        infoFromSelectedUser = user;

   
        basicInfoForm.Id = user.Id;
        basicInfoForm.FirstName = user.FirstName!;
        basicInfoForm.LastName = user.LastName!;
        basicInfoForm.Email = user.Email!;
        basicInfoForm.PhoneNumber = user.PhoneNumber!;
        basicInfoForm.Biography = user.Biography!;

    }
    private async Task UpdateForm()
    {
        if (basicInfoForm != null)
        {
            var specificUser = await DbContext.Users.FirstOrDefaultAsync(u => u.Id == basicInfoForm.Id);

            if (specificUser != null)
            {

                specificUser.FirstName = basicInfoForm.FirstName;
                specificUser.LastName = basicInfoForm.LastName;
                specificUser.PhoneNumber = basicInfoForm.PhoneNumber;
                specificUser.Email = basicInfoForm.Email;
                specificUser.Biography = basicInfoForm.Biography;

                var result = await UserMananger.UpdateAsync(specificUser);

                if (result.Succeeded)
                {
                    statusMessage = true;
                    await LoadUsers(); 
                    ShowUserForm = false; 
                }
                else
                {
                    statusMessage = false;
                }
            }
        }
    }
    public void CancelForm()
    {
        ShowUserForm = false;
    }

    public class BasicInfoForm
    {
        public string Id { get; set; } = null!;

        [DataType(DataType.Text)]
        [Display(Name = "First name", Prompt = " Enter your first name", Order = 0)]
        public string FirstName { get; set; } = null!;

        [DataType(DataType.Text)]
        [Display(Name = "Last name", Prompt = " Enter your last name", Order = 1)]
        public string LastName { get; set; } = null!;

        [DataType(DataType.EmailAddress)]
        [Display(Name = "Email-address", Prompt = " Enter your email-address", Order = 2)]
        [RegularExpression(@"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = null!;

        [DataType(DataType.PhoneNumber)]
        [Display(Name = "Phone Number", Order = 3)]
        public string PhoneNumber { get; set; } = null!;

        [DataType(DataType.Text)]
        [Display(Name = "Biography", Order = 4)]
        public string Biography { get; set; } = null!;

    };
}

<PageTitle>Users</PageTitle>



      @if (ShowUserForm)
{
    <div class="user-form">
        <h2>Account Details</h2>
        <h5>Basic Info</h5>
        <EditForm Model="@basicInfoForm" OnValidSubmit="UpdateForm" method="post" novalidate>
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="firstName">First name</label>
                <InputText id="firstName" @bind-Value="basicInfoForm.FirstName" class="form-control" />
                <ValidationMessage For="@(() => basicInfoForm.FirstName)" />
            </div>

            <div class="form-group">
                <label for="lastName">Last name</label>
                <InputText id="lastName" @bind-Value="basicInfoForm.LastName" class="form-control" />
                <ValidationMessage For="@(() => basicInfoForm.LastName)" />
            </div>

            <div class="form-group">
                <label for="email">Email address</label>
                <InputText id="email" @bind-Value="basicInfoForm.Email" class="form-control" />
                <ValidationMessage For="@(() => basicInfoForm.Email)" />
            </div>

            <div class="form-group">
                <label for="phoneNumber">Phone</label>
                <InputText id="phoneNumber" @bind-Value="basicInfoForm.PhoneNumber" class="form-control" />
                <ValidationMessage For="@(() => basicInfoForm.PhoneNumber)" />
            </div>

            <div class="form-group">
                <label for="biography">Biography</label>
                <InputTextArea id="biography" @bind-Value="basicInfoForm.Biography" rows="4" class="form-control"></InputTextArea>
            </div>

            <div class="form-group">
                <button class="btn btn-primary" @onclick="CancelForm">Cancel Form</button>
                <button class="btn btn-primary" type="submit">Save changes</button>
            </div>
        </EditForm>
        
    </div>
}


        @if (statusMessage)
        {
            <div class="alert alert-success" role="alert">
                User was updated successfully
            </div>
          
        }
     
            @if(resultUpdate == "Error")
            {
                <div class="alert alert-danger" role="alert">
                    Something went wrong!
                </div>
            }
            else if(resultUpdate == "Success") 
            {
                <div class="alert alert-success" role="alert">
                    User was updated to admin!
                </div>
            }
            @if (resultDelete == "Error")
            {
                <div class="alert alert-danger" role="alert">
                    Something went wrong!
                </div>
            }
            else if (resultDelete == "Success")
            {
                <div class="alert alert-success" role="alert">
                    User was deleted successfully!
                </div>
}

        @if (userList != null && userList.Any())
        {

            <div class="title-box">
               <div class="create-user-btn">
                    <a href="/createuser">Create new user</a>                    
                </div>
            <h1>Users</h1>
            </div>
            <div class="user-container">
                @foreach (var userWithRoles in userListWithRoles)
                {
                    <div class="user-card">
                         <img src="/Images/avatar.svg" alt="Alternate Text" />
                        <div><strong>@userWithRoles.User.FirstName @userWithRoles.User.LastName</strong></div>
                        <div>Email: @userWithRoles.User.Email</div>
                        <div>Phone: @userWithRoles.User.PhoneNumber</div>
                        <div>Bio: @userWithRoles.User.Biography</div>
                        <div>Email Confirmed: @userWithRoles.User.EmailConfirmed</div>
                        @if (userWithRoles.Roles.Contains("ADMIN"))
                        {
                            <div>Role: Admin</div>
                        }
                        else
                        {
                            <div>Role: Member</div>
                        }

                        <button class="btn btn-danger" @onclick="() => ShowDeleteConfirmation(userWithRoles.User.Id)">Remove</button>
                         <button class="btn btn-secondary" @onclick="() => ShowUpdateForm(userWithRoles.User)">Update</button>

                        <button class="btn btn-primary" @onclick="() => ShowUpdateConfirmation(userWithRoles.User.Id)">Make Admin</button>
                    </div>
                }
                <h5>@resultDelete</h5>
                <h5>@resultUpdate</h5>

                            
            </div>
            @if (showDeleteConfirmation)
            {
                <div>

                    <p>Are you sure you want to delete this user?</p>
                    <button class="btn btn-danger" @onclick="() => DeleteUser(selectedUserId)">Yes</button>
                    <button class="btn btn-secondary" @onclick="CloseDeleteConfirmation">No</button>

                </div>
            }

            @if (showUpdateConfirmation)
            {
                <div>

                    <p>Are you sure you want to make this user an admin?</p>
                    <button class="btn btn-success" @onclick="() => UpdateUserRole(selectedUserId)">Yes</button>
                    <button class="btn btn-secondary" @onclick="CloseUpdateConfirmation">No</button>

                </div>
            }
           
        }
        else
        {
            <div>Loading</div>
        }

 
    

