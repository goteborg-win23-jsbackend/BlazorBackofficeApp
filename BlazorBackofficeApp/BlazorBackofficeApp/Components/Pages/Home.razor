@page "/"
@using BlazorBackofficeApp.Contexts
@using BlazorBackofficeApp.Data
@using BlazorBackofficeApp.Models
@using BlazorBackofficeApp.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject UserService UserService
@inject RoleManager<IdentityRole> RoleManager
@inject UserManager<ApplicationUser> UserMananger
@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>Users</PageTitle>
@code {


    List<UserWithRoles> userListWithRoles;
    string resultDelete = "";
    string resultUpdate = "";
    List<ApplicationUser> userList;
    
    protected override async Task OnInitializedAsync()
    {
        var user = await DbContext.Users.ToListAsync();

        await LoadUsers();
        user = userList;
        await LoadUsersWithRoles();
        
    }
    private async Task LoadUsersWithRoles()
    {
        userListWithRoles = await UserService.GetAllUsersWithRolesAsync();
    }

    private async Task DeleteUser(string userId)
    {
        var result = await UserService.DeleteUser(userId);
        if (result)
        {
            resultDelete = "User was deleted succesfully";
            userList = await DbContext.Users.ToListAsync();
            showDeleteConfirmation = false;
        }
        else
        {
            resultDelete = "Error deleting user.";
        }
    }
    private async Task LoadUsers()
    {
        userList = await DbContext.Users.ToListAsync();
        
    }

    private async Task UpdateUserRole(string userId)
    {
        var result = await UserService.UpdateRole(userId);
        if (result)
        {
            resultUpdate = "User was updated to admin";
            userList = await DbContext.Users.ToListAsync();
            showUpdateConfirmation = false;
        }
        else
        {
            resultUpdate = "Error updating user.";
        }
    }
    
    bool showDeleteConfirmation = false;
    bool showUpdateConfirmation = false;
    string selectedUserId = "";

    private void ShowDeleteConfirmation(string userId)
    {
        selectedUserId = userId;
        showDeleteConfirmation = true;
    }

    private void ShowUpdateConfirmation(string userId)
    {
        selectedUserId = userId;
        showUpdateConfirmation = true;
    }

    private void CloseDeleteConfirmation()
    {
        showDeleteConfirmation = false;
    }

    private void CloseUpdateConfirmation()
    {
        showUpdateConfirmation = false;
    }
}
<PageTitle>Users</PageTitle>


<AuthorizeView>
    <Authorized>
        @if (userList != null && userList.Any())
        {
            <h1>Web Application Blazor: User Service</h1>

            <p>Users:</p>
            <div class="user-container">
                @foreach (var userWithRoles in userListWithRoles)
                {
                    <div class="user-card">
                        <div><strong>@userWithRoles.User.FirstName @userWithRoles.User.LastName</strong></div>
                        <div>Email: @userWithRoles.User.Email</div>
                        @if (userWithRoles.Roles.Contains("ADMIN"))
                        {
                            <div>Role: Admin</div>
                        }
                        else
                        {
                            <div>Role: Member</div>
                        }

                        <button class="btn-mine" @onclick="() => ShowDeleteConfirmation(userWithRoles.User.Id)">Remove</button>
                        <button class="btn-mine">Edit</button>
                        <button class="btn-mine" @onclick="() => ShowUpdateConfirmation(userWithRoles.User.Id)">Make Admin</button>
                        <p>@resultDelete</p>
                    </div>
                }
                <h5>@resultDelete</h5>
                <h5>@resultUpdate</h5>
                <h5>@resultUpdate</h5>
                

                
            </div>
            @if (showDeleteConfirmation)
            {
                <div>

                    <p>Are you sure you want to delete this user?</p>
                    <button class="btn btn-danger" @onclick="() => DeleteUser(selectedUserId)">Yes</button>
                    <button class="btn btn-secondary" @onclick="CloseDeleteConfirmation">No</button>

                </div>
            }

            @if (showUpdateConfirmation)
            {
                <div>

                    <p>Are you sure you want to make this user an admin?</p>
                    <button class="btn btn-success" @onclick="() => UpdateUserRole(selectedUserId)">Yes</button>
                    <button class="btn btn-secondary" @onclick="CloseUpdateConfirmation">No</button>

                </div>
            }
            <div>
                <h5>Create Admin user</h5>
                <button class="btn btn-lg btn-primary">Create</button>
            </div>
        }
        else
        {
            <div>Loading</div>
        }

        <div>
        </div>

        <AntiforgeryToken />

    </Authorized>
    <NotAuthorized>
        <h1>Welcome Admin</h1>

        <p>Login to access your services</p>
    </NotAuthorized>
</AuthorizeView>



<style>
    .user-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
    }

    .user-card {
        background-color: #f8f9fa;
        border: 1px solid #ced4da;
        border-radius: 5px;
        padding: 10px;
        margin-bottom: 10px;
        width: calc(33.3333% - 20px);
        box-sizing: border-box;
    }

</style>